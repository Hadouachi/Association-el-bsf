// Script pour exporter les donn√©es locales vers la production
const mysql = require('mysql2/promise');
const fs = require('fs');
const path = require('path');

// Charger le fichier .env.local
require('dotenv').config({ path: path.join(__dirname, '.env.local') });

const DATABASE_URL = process.env.DATABASE_URL;

if (!DATABASE_URL) {
  console.error('‚ùå DATABASE_URL non d√©finie dans .env.local');
  process.exit(1);
}

console.log('üì§ Export des donn√©es locales...');

async function exportData() {
  let connection;
  
  try {
    // Se connecter √† la base de donn√©es locale
    connection = await mysql.createConnection(DATABASE_URL);
    console.log('‚úÖ Connexion √† la base de donn√©es locale r√©ussie');

    // Exporter les activit√©s
    console.log('üìã Export des activit√©s...');
    const [activities] = await connection.execute('SELECT * FROM Activity ORDER BY createdAt DESC');
    console.log(`   - ${activities.length} activit√©s export√©es`);

    // Exporter les actualit√©s
    console.log('üì∞ Export des actualit√©s...');
    const [news] = await connection.execute('SELECT * FROM News ORDER BY createdAt DESC');
    console.log(`   - ${news.length} actualit√©s export√©es`);

    // Exporter le contenu √Ä propos
    console.log('‚ÑπÔ∏è Export du contenu √Ä propos...');
    const [about] = await connection.execute('SELECT * FROM AboutContent ORDER BY createdAt DESC');
    console.log(`   - ${about.length} contenus √Ä propos export√©s`);

    // Cr√©er le fichier d'export
    const exportData = {
      timestamp: new Date().toISOString(),
      activities: activities,
      news: news,
      about: about
    };

    const exportPath = path.join(__dirname, 'data-export.json');
    fs.writeFileSync(exportPath, JSON.stringify(exportData, null, 2));
    console.log(`‚úÖ Donn√©es export√©es vers: ${exportPath}`);

    // Cr√©er un script SQL pour la production
    console.log('üìù G√©n√©ration du script SQL...');
    let sqlScript = `-- Script de synchronisation des donn√©es
-- G√©n√©r√© le: ${new Date().toISOString()}

-- Nettoyer les tables existantes (optionnel)
-- DELETE FROM AboutContent;
-- DELETE FROM News;
-- DELETE FROM Activity;

`;

    // Ajouter les activit√©s
    if (activities.length > 0) {
      sqlScript += `-- Insertion des activit√©s\n`;
      activities.forEach(activity => {
        const values = [
          `'${activity.id}'`,
          `'${activity.title.replace(/'/g, "\\'")}'`,
          `'${(activity.description || '').replace(/'/g, "\\'")}'`,
          `'${(activity.longDescription || '').replace(/'/g, "\\'")}'`,
          `'${activity.date || ''}'`,
          `'${activity.time || ''}'`,
          `'${(activity.location || '').replace(/'/g, "\\'")}'`,
          activity.participants || 0,
          `'${activity.status}'`,
          `'${activity.coverImage || ''}'`,
          `'${JSON.stringify(activity.images || [])}'`,
          `'${JSON.stringify(activity.videos || [])}'`,
          `'${JSON.stringify(activity.contentBlocks || [])}'`,
          `'${activity.createdAt}'`,
          `'${activity.updatedAt}'`
        ];
        
        sqlScript += `INSERT INTO Activity (id, title, description, longDescription, date, time, location, participants, status, coverImage, images, videos, contentBlocks, createdAt, updatedAt) VALUES (${values.join(', ')});\n`;
      });
    }

    // Ajouter les actualit√©s
    if (news.length > 0) {
      sqlScript += `\n-- Insertion des actualit√©s\n`;
      news.forEach(article => {
        const values = [
          `'${article.id}'`,
          `'${article.title.replace(/'/g, "\\'")}'`,
          `'${(article.content || '').replace(/'/g, "\\'")}'`,
          `'${(article.excerpt || '').replace(/'/g, "\\'")}'`,
          `'${(article.author || '').replace(/'/g, "\\'")}'`,
          `'${(article.category || '').replace(/'/g, "\\'")}'`,
          `'${article.image || ''}'`,
          `'${article.status}'`,
          article.publishedAt ? `'${article.publishedAt}'` : 'NULL',
          `'${article.createdAt}'`,
          `'${article.updatedAt}'`
        ];
        
        sqlScript += `INSERT INTO News (id, title, content, excerpt, author, category, image, status, publishedAt, createdAt, updatedAt) VALUES (${values.join(', ')});\n`;
      });
    }

    // Ajouter le contenu √Ä propos
    if (about.length > 0) {
      sqlScript += `\n-- Insertion du contenu √Ä propos\n`;
      about.forEach(content => {
        const values = [
          `'${content.id}'`,
          `'${content.title.replace(/'/g, "\\'")}'`,
          `'${(content.subtitle || '').replace(/'/g, "\\'")}'`,
          `'${(content.description || '').replace(/'/g, "\\'")}'`,
          `'${content.coverImage || ''}'`,
          `'${content.status}'`,
          `'${content.createdAt}'`,
          `'${content.updatedAt}'`
        ];
        
        sqlScript += `INSERT INTO AboutContent (id, title, subtitle, description, coverImage, status, createdAt, updatedAt) VALUES (${values.join(', ')});\n`;
      });
    }

    const sqlPath = path.join(__dirname, 'data-sync.sql');
    fs.writeFileSync(sqlPath, sqlScript);
    console.log(`‚úÖ Script SQL g√©n√©r√©: ${sqlPath}`);

    console.log('\nüéâ Export termin√© avec succ√®s !');
    console.log('\nüìù Fichiers g√©n√©r√©s:');
    console.log(`   - ${exportPath}`);
    console.log(`   - ${sqlPath}`);
    console.log('\nüìã Prochaines √©tapes:');
    console.log('   1. V√©rifiez les fichiers g√©n√©r√©s');
    console.log('   2. Lancez le d√©ploiement: .\\deploy-with-sync.ps1');
    console.log('   3. Les donn√©es seront synchronis√©es automatiquement');

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'export:', error);
    process.exit(1);
  } finally {
    if (connection) {
      await connection.end();
      console.log('üîå Connexion ferm√©e');
    }
  }
}

exportData();
