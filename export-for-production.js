// Script pour exporter les donn√©es locales pour la production
const mysql = require('mysql2/promise');
const fs = require('fs');
const path = require('path');

const dbConfig = {
  host: 'localhost',
  user: 'root',
  password: 'Hadouachi20@',
  database: 'association_el_bsf',
  port: 3306
};

async function exportData() {
  let connection;
  
  try {
    console.log('üîÑ Tentative de connexion √† la base de donn√©es locale...');
    
    // En production Vercel, utiliser les donn√©es de fallback
    if (process.env.VERCEL === 'true') {
      console.log('‚úÖ Mode production Vercel - Utilisation des donn√©es de fallback');
      await exportFallbackData();
      return;
    }
    
    // En local, essayer de se connecter √† la base de donn√©es
    try {
      connection = await mysql.createConnection(dbConfig);
      console.log('‚úÖ Connexion √©tablie');

      // Exporter les activit√©s
      console.log('üìä Export des activit√©s...');
      const [activities] = await connection.execute(`
        SELECT 
          id, title, description, longDescription, date, time, location, 
          participants, status, coverImage, images, videos, contentBlocks,
          createdAt, updatedAt
        FROM Activity 
        ORDER BY createdAt DESC
      `);
      
      // Parser les champs JSON
      const parsedActivities = activities.map(activity => ({
        ...activity,
        images: Array.isArray(activity.images) ? activity.images : [],
        videos: Array.isArray(activity.videos) ? activity.videos : [],
        contentBlocks: Array.isArray(activity.contentBlocks) ? activity.contentBlocks : []
      }));
      
      console.log(`‚úÖ ${parsedActivities.length} activit√©s export√©es`);

      // Exporter les actualit√©s
      console.log('üì∞ Export des actualit√©s...');
      const [news] = await connection.execute(`
        SELECT * FROM News 
        WHERE status = 'published'
        ORDER BY publishedAt DESC
      `);
      
      console.log(`‚úÖ ${news.length} actualit√©s export√©es`);

      // Exporter le contenu √Ä propos
      console.log('‚ÑπÔ∏è Export du contenu √Ä propos...');
      const [about] = await connection.execute(`
        SELECT * FROM AboutContent 
        WHERE status = 'published'
        ORDER BY createdAt DESC
      `);
      
      console.log(`‚úÖ ${about.length} contenus √Ä propos export√©s`);

      // Cr√©er l'objet de donn√©es
      const exportData = {
        activities: parsedActivities,
        news: news,
        about: about,
        exportedAt: new Date().toISOString(),
        version: '1.0.0'
      };

      // Sauvegarder dans data-export.json
      const exportPath = path.join(__dirname, 'data-export.json');
      fs.writeFileSync(exportPath, JSON.stringify(exportData, null, 2));
      
      console.log('‚úÖ Donn√©es export√©es vers data-export.json');
      console.log(`üìÅ Fichier: ${exportPath}`);
      
      // Afficher un r√©sum√©
      console.log('\nüìä R√©sum√© de l\'export:');
      console.log(`   - Activit√©s: ${parsedActivities.length}`);
      console.log(`   - Actualit√©s: ${news.length}`);
      console.log(`   - Contenu √Ä propos: ${about.length}`);
      
      console.log('\nüöÄ Pr√™t pour le d√©ploiement !');
      console.log('   Les donn√©es seront automatiquement utilis√©es en production.');

    } catch (dbError) {
      console.log('‚ö†Ô∏è Impossible de se connecter √† la base de donn√©es locale');
      console.log('‚úÖ Utilisation des donn√©es de fallback');
      await exportFallbackData();
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'export:', error);
    console.log('‚úÖ Utilisation des donn√©es de fallback');
    await exportFallbackData();
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}

// Fonction pour exporter les donn√©es de fallback
async function exportFallbackData() {
  console.log('üì¶ Export des donn√©es de fallback...');
  
  // Importer les donn√©es locales
  const { getAllLocalActivities } = require('./data/localActivities');
  
  const fallbackData = {
    activities: getAllLocalActivities(),
    news: [
      {
        id: "1",
        title: "Ouverture de nouveaux cours de Tajweed",
        excerpt: "Nous sommes ravis d'annoncer l'ouverture de nouveaux cours de Tajweed pour tous les niveaux.",
        content: "Ces cours sont con√ßus pour am√©liorer votre r√©citation du Coran avec les r√®gles appropri√©es.",
        author: "Association El BSF",
        category: "√âducation",
        image: "/images/news/tajweed.jpg",
        status: "published",
        publishedAt: new Date().toISOString(),
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      }
    ],
    about: [
      {
        id: "1",
        title: "√Ä propos de l'Association El BSF",
        subtitle: "Notre mission",
        description: "L'Association El BSF ≈ìuvre pour l'√©ducation et le d√©veloppement communautaire.",
        coverImage: "/images/about/association.jpg",
        status: "published",
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      }
    ],
    exportedAt: new Date().toISOString(),
    version: '1.0.0',
    source: 'fallback'
  };

  // Sauvegarder dans data-export.json
  const exportPath = path.join(__dirname, 'data-export.json');
  fs.writeFileSync(exportPath, JSON.stringify(fallbackData, null, 2));
  
  console.log('‚úÖ Donn√©es de fallback export√©es vers data-export.json');
  console.log(`üìÅ Fichier: ${exportPath}`);
  
  // Afficher un r√©sum√©
  console.log('\nüìä R√©sum√© de l\'export (fallback):');
  console.log(`   - Activit√©s: ${fallbackData.activities.length}`);
  console.log(`   - Actualit√©s: ${fallbackData.news.length}`);
  console.log(`   - Contenu √Ä propos: ${fallbackData.about.length}`);
  
  console.log('\nüöÄ Pr√™t pour le d√©ploiement !');
  console.log('   Les donn√©es de fallback seront utilis√©es en production.');
}

exportData();
